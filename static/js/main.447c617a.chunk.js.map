{"version":3,"sources":["components/IssueCard.js","config/history.js","recoil/atoms.js","api/githubApi.js","pages/ListPage.js","pages/IssueDetail.js","components/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["IssueCard","props","to","number","title","createBrowserHistory","loadingState","atom","key","default","getGithubApi","path","callback","isLoading","axios","create","baseURL","get","then","res","data","catch","e","console","error","withRouter","useState","allIssues","setAllIssues","issuesDisplayed","setIssuesDisplayed","pageNumber","setPageNumber","useSetRecoilState","useEffect","setsAllIssues","isCleanUp","history","listen","location","setsPageNumber","search","issues","window","tmpNumber","Number","replace","n","tmpArr","i","push","displayListPathMatched","className","onClick","Pagination","count","Math","floor","length","page","color","onChange","handleClickPagination","map","userData","issue","setIssue","pathname","split","slice","setsIssue","body","Loading","loading","useRecoilValue","App","basename","exact","component","IssueDetail","ListPage","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.447c617a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles/IssueCard.css\";\n\nconst IssueCard = (props) => {\n  return (\n    <Link to={`issues/${props.number}`}>\n      <article>\n        <h4>{props.title}</h4>\n        <p>{props.number}</p>\n      </article>\n    </Link>\n  );\n};\n\nexport default IssueCard;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import { atom } from \"recoil\";\n\nexport const loadingState = atom({\n  key: \"loadingState\",\n  default: false,\n});\n","import axios from \"axios\";\n\nconst getGithubApi = (path, callback, isLoading) => {\n  isLoading(true);\n  axios\n    .create({\n      baseURL: \"https://api.github.com\",\n    })\n    .get(path)\n    .then((res) => {\n      callback(res.data);\n      isLoading(false);\n    })\n    .catch((e) => {\n      console.error(e);\n      isLoading(false);\n    });\n};\n\nexport default getGithubApi;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport IssueCard from \"../components/IssueCard\";\nimport history from \"../config/history\";\nimport { withRouter } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport { loadingState } from \"../recoil/atoms\";\nimport getGithubApi from \"../api/githubApi\";\nimport \"./styles/Listpage.css\";\n\nconst ListPage = () => {\n  const [allIssues, setAllIssues] = useState([]);\n  const [issuesDisplayed, setIssuesDisplayed] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const isLoading = useSetRecoilState(loadingState);\n\n  useEffect(() => {\n    getGithubApi(\"/repos/facebook/react/issues\", setsAllIssues, isLoading);\n  }, []);\n  useEffect(() => {\n    let isCleanUp = false;\n    history.listen((location) => {\n      if (!isCleanUp) {\n        setsPageNumber(location.search, allIssues);\n      }\n    });\n    const cleanup = () => {\n      isCleanUp = true;\n    };\n    return cleanup;\n  }, [allIssues]);\n\n  const setsAllIssues = (issues) => {\n    setAllIssues(issues);\n    setsPageNumber(window.location.search, issues);\n  };\n  const displayListPathMatched = (n, issues) => {\n    setIssuesDisplayed([]);\n    const tmpArr = [];\n    for (let i = (n - 1) * 10; i < n * 10; i++) {\n      if (issues[i]) {\n        tmpArr.push(issues[i]);\n      }\n    }\n    setIssuesDisplayed(tmpArr);\n  };\n  const handleClickPagination = (e, n) => {\n    history.push(`/issues?page=${n}`);\n  };\n  const setsPageNumber = (search, issues) => {\n    const tmpNumber = Number(search.replace(\"?page=\", \"\"));\n    displayListPathMatched(tmpNumber, issues);\n    setPageNumber(tmpNumber);\n  };\n  const toFirstPage = () => {\n    history.push(\"/issues?page=1\");\n  };\n  const toLastPage = () => {\n    history.push(`/issues?page=${Math.floor(allIssues.length / 10)}`);\n  };\n  return (\n    <Fragment>\n      <div className=\"pagination-container\">\n        <button onClick={toFirstPage}>最初</button>\n        <Pagination\n          count={Math.floor(allIssues.length / 10)}\n          page={pageNumber}\n          color=\"primary\"\n          onChange={(e, n) => handleClickPagination(e, n)}\n        />\n        <button onClick={() => toLastPage()}>最後</button>\n      </div>\n      <div className=\"list-page\">\n        <div className=\"issue-card-container\">\n          {issuesDisplayed.map((userData) => (\n            <div key={userData.number} className=\"issue-card-wrapper\">\n              <IssueCard number={userData.number} title={userData.title} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\nexport default withRouter(ListPage);\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport { loadingState } from \"../recoil/atoms\";\nimport getGithubApi from \"../api/githubApi\";\n\nconst IssueCard = () => {\n  const [issue, setIssue] = useState({});\n  const isLoading = useSetRecoilState(loadingState);\n\n  useEffect(() => {\n    getGithubApi(\n      `/repos/facebook/react/issues/${\n        window.location.pathname.split(\"/\").slice(-1)[0]\n      }`,\n      setsIssue,\n      isLoading\n    );\n  }, []);\n  const setsIssue = (data) => {\n    setIssue(data);\n  };\n  return (\n    <div>\n      <p>{issue.number}</p>\n      <p>{issue.title}</p>\n      <p>{issue.body}</p>\n    </div>\n  );\n};\n\nexport default withRouter(IssueCard);\n","import React, { Fragment } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { loadingState } from \"../recoil/atoms\";\nimport \"./styles/Loading.css\";\n\nconst Loading = () => {\n  const loading = useRecoilValue(loadingState);\n\n  return (\n    <Fragment>\n      {(() => {\n        if (loading) {\n          return (\n            <div className=\"mask\">\n              <i className=\"loader\">Loading...</i>\n            </div>\n          );\n        }\n      })()}\n    </Fragment>\n  );\n};\n\nexport default Loading;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport ListPage from \"./pages/ListPage\";\nimport IssueDetail from \"./pages/IssueDetail\";\nimport Loading from \"./components/Loading\";\n\nconst ROUTER_BASENAME =\n  process.env.NODE_ENV === 'development' ? '/' : '/github-issue';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router basename={ROUTER_BASENAME}>\n          <RecoilRoot>\n            <Switch>\n              <Route exact path=\"/issues/:number\" component={IssueDetail} />\n              <Route exact path=\"/issues\" component={ListPage} />\n              <Redirect to=\"/issues?page=1\" />\n            </Switch>\n            <Loading />\n          </RecoilRoot>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}